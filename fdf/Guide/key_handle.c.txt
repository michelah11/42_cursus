File: key_handle.c
This file contains functions for handling keypress events, allowing the user to interact with the program by rotating,
scaling, translating, and changing the projection of the 3D map.

Functions:

1. key_translate(int keycode, t_fdf *fdf):
	- Purpose: Handles translation (movement) of the camera based on arrow key input. The perspective can be moved up, down,
			left, or right, which effectively moves the entire map in the opposite direction
			It checks which arrow key was pressed and adjusts the perspective's position accordingly. Each key press
			shifts the camera by 10 units in the corresponding direction
	- Parameters:
		- int keycode: The key code of the pressed key.
		- t_fdf *fdf: The main structure containing camera and rendering information.
	- Code Documentation:

	static void key_translate(int keycode, t_fdf *fdf) {
		if (keycode == KEY_RIGHT)
			fdf->cam->move_x += 10;	// Move the camera right
		else if (keycode == KEY_LEFT)
			fdf->cam->move_x -= 10;	// Move the camera left
		if (keycode == KEY_DOWN)
			fdf->cam->move_y += 10;	// Move the camera down
		else if (keycode == KEY_UP)
			fdf->cam->move_y -= 10;	// Move the camera up
	}

2. key_scale(int keycode, t_fdf *fdf):
	- Purpose: Handles scaling of the camera based on key input. The user can zoom in, zoom out, or adjust the scaling of the z-axis.
			It checks the key pressed and adjusts the camera's scale factors accordingly.
			The z-scale is limited to a range between -1 and 1 to prevent extreme distortions.
	- Parameters:
		- int keycode: The key code of the pressed key.
		- t_fdf *fdf: The main structure containing camera and rendering information.
	- Code Documentation:

	static void key_scale(int keycode, t_fdf *fdf) {
		if (keycode == KEY_PLUS)
			fdf->cam->scale_factor += 1;	// Increase the scale factor
		else if (keycode == KEY_MINUS)
			fdf->cam->scale_factor -= 1;	// Decrease the scale factor
		else if (keycode == KEY_Z && fdf->cam->scale_z > -1)
			fdf->cam->scale_z -= 0.1;	// Decrease the z-scale factor
		else if (keycode == KEY_X && fdf->cam->scale_z < 1)
			fdf->cam->scale_z += 0.1;	// Increase the z-scale factor
	}

3. key_rotate(int keycode, t_fdf *fdf):
	- Purpose: Handles rotation of the camera based on key input. The user can rotate the view around the x, y, or z axes to
			get different perspectives on the 3D map
			It checks which rotation key was pressed and adjusts the camera's rotation angles. The rotation is performed
			in increments of 5 degrees, converted to radians using ANG_1 (which is 1 degree in radians).
	- Parameters:
		- int keycode: The key code of the pressed key.
		- t_fdf *fdf: The main structure containing camera and rendering information.
	- Code Documentation:

	static void key_rotate(int keycode, t_fdf *fdf) {
		if (keycode == KEY_S)
			fdf->cam->alpha -= (5 * ANG_D_1);	// Rotate around the x-axis (down)
		else if (keycode == KEY_W)
			fdf->cam->alpha += (5 * ANG_D_1);	// Rotate around the x-axis (up)
		else if (keycode == KEY_A)
			fdf->cam->gamma -= (5 * ANG_D_1);	// Rotate around the z-axis (left)
		else if (keycode == KEY_D)
			fdf->cam->gamma += (5 * ANG_D_1);	// Rotate around the z-axis (right)
		else if (keycode == KEY_Q)
			fdf->cam->beta -= (5 * ANG_D_1);	// Rotate around the y-axis (left)
		else if (keycode == KEY_E)
			fdf->cam->beta += (5 * ANG_D_1);	// Rotate around the y-axis (right)
	}

4. key_project(int keycode, t_fdf *fdf):
	- Purpose: Changes the projection mode of the camera based on key input. The user can switch between different projection modes
			to view the scene from different perspectives
			It checks which projection key was pressed and sets the camera's projection mode to either perspective, isometric, or top view.
	- Parameters:
	- int keycode: The key code of the pressed key.
	- t_fdf *fdf: The main structure containing camera and rendering information.
	- Code Documentation:

	static void key_project(int keycode, t_fdf *fdf) {
		if (keycode == KEY_P)
			fdf->cam->projection = PERSPECTIVE;	// Set projection to perspective
		else if (keycode == KEY_I)
			fdf->cam->projection = ISOMETRIC;	// Set projection to isometric
		else if (keycode == KEY_O)
			fdf->cam->projection = TOP;	// Set projection to top view
	}

5. key_handle(int keycode, t_fdf *fdf):
	- Purpose: Central handler for keypress events, calling appropriate functions based on the pressed key. It determines which
			specific action to take based on the key pressed and then calls the appropriate function to handle that action.
			It checks the key code and calls the corresponding function.
			It handles special cases like closing the program, toggling the color palette, and resetting the view.
			After handling the key press, the function calls render(fdf) to re-render the scene with the updated camera settings.
	- Parameters:
		- int keycode: The key code of the pressed key.
		- t_fdf *fdf: The main structure containing camera and rendering information.
	- Returns: 0 after handling the key event.
	- Code Documentation:

	int key_handle(int keycode, t_fdf *fdf) {
		if (keycode == KEY_ESC)
			close_all(fdf, 0);	// Close the program on ESC key
		else if (keycode == KEY_RIGHT || keycode == KEY_LEFT || keycode == KEY_UP || keycode == KEY_DOWN)
			key_translate(keycode, fdf);	// Handle translation keys
		else if (keycode == KEY_PLUS || keycode == KEY_MINUS || keycode == KEY_Z || keycode == KEY_X)
			key_scale(keycode, fdf);	// Handle scaling keys
		else if (keycode == KEY_A || keycode == KEY_S || keycode == KEY_D || keycode == KEY_Q || keycode == KEY_W || keycode == KEY_E)
			key_rotate(keycode, fdf);	// Handle rotation keys
		else if (keycode == KEY_P || keycode == KEY_I || keycode == KEY_O)
			key_project(keycode, fdf);	// Handle projection keys
		else if (keycode == KEY_SPACE)
			fdf->cam->color_pallet = !fdf->cam->color_pallet;	// Toggle color pallet on SPACE key
		else if (keycode == KEY_R)
			reset(fdf);	// Reset the view on R key
		render(fdf);	// Re-render the scene with updated parameters
		return (0);	// Return 0 to indicate successful handling
	}

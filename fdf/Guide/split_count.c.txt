
File: split_count.c
This file contains a utility function to count the number of substrings in a string
based on a delimiter.

Functions:

1. split_count(const char *s, char c):
	- Purpose: Counts the number of substrings in the string s that are separated by the delimiter c.
	- Parameters:
		- const char *s: The input string.
		- char c: The delimiter character.
	- Returns: The number of substrings found.
	- Code Documentation:

	size_t split_count(const char *s, char c) {
		size_t i; // Index for iterating over the string
		size_t prev; // Previous index of a substring start
		size_t next; // Next index of a delimiter
		size_t size; // Size of the current substring
		size_t counter; // Counter for the number of substrings

		i = 0;
		prev = i;
		next = i;
		counter = 0;
		while (1) // Infinite loop to traverse the string
		{
			if (s[i] == c || s[i] == '\0')
				next = i; // Update the next index when a delimiter or end of string is found
			size = next - prev; // Calculate the size of the substring
			if (size > 1 || (size == 1 && s[i - 1] != c)) // Increment the counter if the substring is valid
				counter++;
			if (s[i] == '\0')
				break; // Break out of the loop if the end of the string is reached
			prev = next; // Update the previous index
			i++;
		}
		return (counter); // Return the count of substrings
	}
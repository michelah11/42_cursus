File: init_utils.c
This file provides utility functions for initializing and manipulating map coordinates, scaling factors, and other related tasks.

Functions:

1. init_coordinates(int width, int depth):
	- Purpose: Allocates and initializes a 2D array of t_point structures representing the map coordinates.
	- Parameters:
	- int width: The width of the map (number of columns).
	- int depth: The depth of the map (number of rows).
	- Returns: A pointer to the 2D array of t_point structures, or NULL on failure.
	- Code Documentation:

	t_point init_coordinates(int width, int depth)
	{
		t_point coordinates;
		int i, j;

		coordinates = malloc(width * sizeof(t_point *));	// Allocate memory for the array of row pointers
		if (!coordinates)
			return (NULL);	// Return NULL if allocation fails
		i = 0;
		while (i < width) {
			coordinates[i] = malloc(depth * sizeof(t_point));	// Allocate memory for each row
			if (!coordinates[i])
				return (NULL);	// Return NULL if allocation fails

			j = 0;
			while (j < depth) {
				coordinates[i][j].x = 0;	// Initialize each point's x-coordinate
				coordinates[i][j].y = 0;	// Initialize each point's y-coordinate
				coordinates[i][j].z = 0;	// Initialize each point's z-coordinate
				coordinates[i][j].color = 0;	// Initialize each point's color
				j++;
			}
			i++;
		}
		return (coordinates);	// Return the initialized 2D array of coordinates
	}

2. center_to_origin(t_map *map):
	- Purpose: Adjusts the coordinates in the map to be centered around the origin (0, 0).
	- Parameters:
	- t_map *map: The map structure containing the coordinates to be adjusted.
	- Code Documentation:

	void center_to_origin(t_map *map) {
		int x, y;

		y = 0;
		while (y < map->max_y) {
			x = 0;
			while (x < map->max_x) {
				map->coordinates[x][y].x -= map->max_x / 2;	// Center the x-coordinate
				map->coordinates[x][y].y -= map->max_y / 2;	// Center the y-coordinate
				x++;
			}
			y++;
		}
	}

3. scale_to_fit(t_map *map):
	- Purpose: Calculates the appropriate scale factor to fit the map within the window.
	- Parameters:
	- t_map *map: The map structure containing the coordinates.
	- Returns: The calculated scale factor.
	- Code Documentation:

	float scale_to_fit(t_map *map) {
		float scale_x, scale_y;
		float scale_factor;

		scale_x = WINDOW_WIDTH / map->max_x;	// Calculate the horizontal scale factor
		scale_y = WINDOW_HEIGHT / map->max_y;	// Calculate the vertical scale factor

		scale_factor = min(scale_x, scale_y);	// Choose the smaller scale factor to maintain aspect ratio
		if (scale_factor < 4)
			return (2);	// Return a minimum scale factor if necessary

		return (scale_factor / 2);	// Adjust the scale factor to fit
	}

4. reset(t_fdf *fdf):
	- Purpose: Resets the camera settings to their initial state.
	- Parameters:
	- t_fdf *fdf: The main structure containing camera and map information.
	- Code Documentation:

	void reset(t_fdf *fdf) {
		fdf->cam->scale_factor = scale_to_fit(fdf->map);	// Reset the scale factor
		fdf->cam->scale_z = 1;	// Reset the z-scaling factor
		fdf->cam->move_x = WINDOW_WIDTH / 2;	// Center the camera horizontally
		fdf->cam->move_y = WINDOW_HEIGHT / 2;	// Center the camera vertically
		fdf->cam->alpha = 0;	// Reset rotation angles
		fdf->cam->beta = 0;
		fdf->cam->gamma = 0;
	}

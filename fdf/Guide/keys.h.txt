File: keys.h
This header file defines key codes used to handle user input in the fdf program.

The key codes are related to Linux/Unix systems, specifically in the context of graphical applications that use the X Window
System (commonly referred to as X11). The key codes you see, such as 65361 for the left arrow key or 65307 for the escape key,
are the key codes generated by the X11 system when specific keys are pressed on the keyboard.

These key codes come from the X11 system, which is a windowing system for bitmap displays, common on Unix-like operating systems.
When the user presses a key on the keyboard, the X server (part of the X11 system) generates a key event and assigns a key code to it.
This key code is a unique integer that identifies the specific key that was pressed.

Compatibility with X11:
The fdf program is likely using the MiniLibX (MLX) library, which is a simple interface to X11 for creating windows, handling events,
and drawing pixels on Unix-like operating systems. MLX directly interacts with X11 to capture keyboard events. The key codes match the
key codes generated by X11, making it possible to handle keyboard input within the MLX framework.

Direct Handling of Key Events:
By using these key codes, the program can directly respond to specific key presses. For example, when the left arrow key (KEY_LEFT)
is pressed, X11 generates the key code 65361. The fdf program can then use this key code to trigger a specific action, like moving the
view to the left.

Cross-Compatibility with Unix-like Systems:
These key codes are consistent across different Unix-like systems that use X11. This makes the program more portable across different
environments that support the X Window System, such as Linux distributions and some versions of BSD.

Custom Control Scheme:
By defining these key codes manually, the program can set up a custom control scheme tailored to its specific needs. It allows the program
to map specific actions, like panning, zooming, or rotating the view, to keys that make sense within the context of the application.

Key Code Definitions:

- Arrow Keys:
# define KEY_LEFT 65361	// Left arrow key
# define KEY_UP 65362		// Up arrow key
# define KEY_RIGHT 65363 // Right arrow key
# define KEY_DOWN 65364	// Down arrow key


- Numpad Keys:
# define NUMPAD_1 65436	// Numpad 1 key
# define NUMPAD_2 65433	// Numpad 2 key
# define NUMPAD_3 65435	// Numpad 3 key
# define NUMPAD_4 65430	// Numpad 4 key
# define NUMPAD_5 65437	// Numpad 5 key
# define NUMPAD_6 65432	// Numpad 6 key
# define NUMPAD_7 65429	// Numpad 7 key
# define NUMPAD_8 65431	// Numpad 8 key
# define NUMPAD_9 65434	// Numpad 9 key


- Number Keys:
# define NUMKEY_1 49	// Number key 1
# define NUMKEY_2 50	// Number key 2
# define NUMKEY_3 51	// Number key 3
# define NUMKEY_4 52	// Number key 4
# define NUMKEY_5 53	// Number key 5
# define NUMKEY_6 54	// Number key 6
# define NUMKEY_7 55	// Number key 7
# define NUMKEY_8 56	// Number key 8
# define NUMKEY_9 57	// Number key 9


- Control Keys:
# define KEY_PLUS 61	 // Plus key ('+')
# define KEY_MINUS 45	// Minus key ('-')
# define KEY_SPACE 32	// Spacebar key


- Other Functional Keys:
# define KEY_Z 122		// 'Z' key
# define KEY_X 120		// 'X' key
# define KEY_P 112		// 'P' key
# define KEY_I 105		// 'I' key
# define KEY_O 111		// 'O' key
# define KEY_L 108		// 'L' key
# define KEY_R 114		// 'R' key
# define KEY_A 197		// 'A' key
# define KEY_S 115		// 'S' key
# define KEY_D 100		// 'D' key
# define KEY_Q 113		// 'Q' key
# define KEY_W 119		// 'W' key
# define KEY_E 101		// 'E' key
# define KEY_ESC 65307	// Escape key (ESC)

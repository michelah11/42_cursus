File: atoi_base.c
This file contains functions for handling base conversions, specifically converting strings into integers based on a given base.

Functions:

1. sanitized_base(char *base):
	- Purpose: Validates the given base string, ensuring it contains no duplicate characters or invalid symbols like +, -, or spaces.
	- Parameters:
		- char *base: The string representing the base.
	- Returns: The length of the base if valid, or 0 if the base is invalid.
	- Code Documentation:

	int sanitized_base(char *base)
	{
		char	*str;
		int		n;	// Counter for base length
		int		i;	// Index for iterating over the base string
		int		j;	// Inner index for checking duplicates

		n = 0;
		i = 0;
		j = 0;
		str = base;	// Initialize str to point to the base string

		while (base[i] != '\0')	// Iterate over the base string
		{
			j = i + 1;	// Start j from the next character
			if (base[i] == 43 || base[i] == 45 || base[i] == 32)	// Check for invalid characters in the base
				return (0);
			while (str[j] != '\0')	// Check for duplicate characters
			{
				if (str[j] == base[i])
					return (0);
				j++;
			}
			n++;	// Increment the length of the base
			i++;
		}
		return (n);	// Return the length of the valid base
	}

2. find_index(char c, char *str):
	- Purpose: Finds the index of a character c in the string str.
	- Parameters:
		- char c: The character to find.
		- char *str: The string to search in.
	- Returns: The index of the character in the string, or -1 if not found.
	- Code Documentation:

	int find_index(char c, char *str) {
		int	index;

		index = 0;	// Initialize the index
		while (*str)	// Iterate over the string
		{
			if (c == *str)
				return (index);	// Return the index if the character is found
			str++;
			index++;
		}
		return (-1);	// Return -1 if the character is not found
	}

3. has_char(char c, char *str):
	- Purpose: Checks if a character c exists in the string str.
	- Parameters:
		- char c: The character to check for.
		- char *str: The string to search in.
	- Returns: 1 if the character is found, 0 otherwise.
	- Code Documentation:

	int has_char(char c, char *str) {
		while (*str)	// Iterate over the string
		{
			if (c == *str)
				return (1);	// Return 1 if the character is found
			str++;
		}
		return (0);	// Return 0 if the character is not found
	}


4. ft_atoi_base(char *str, char *base):
	- Purpose: Converts a string str to an integer, using the provided base.
	- Parameters:
		- char *str: The string to convert.
		- char *base: The base string for conversion.
	- Returns: The converted integer, or 0 if the base is invalid.
	- Code Documentation:

	int ft_atoi_base(char *str, char *base)
	{
		int	sign;
		int	number;	// The number to be constructed
		int	n;

		sign = 1;	// Initialize the sign as positive
		number = 0;
		n = sanitized_base(base);	// Validate the base and get its length
		if (n < 2)
			return (0);	// Return 0 if the base is invalid
		while (*str == 32 || (*str >= 9 && *str <= 13))	// Skip whitespace characters
			str++;
		while (*str == '-' || *str == '+')	// Handle the sign if present
		{
			if (*str == '-')
				sign *= -1;	// Toggle the sign if a '-' is found
			str++;
		}
		while (*str && has_char(*str, base))	// Construct the number using the base
		{
			number = number * n + find_index(*str, base);
			str++;
		}
		return (sign * number);	// Return the signed number
	}

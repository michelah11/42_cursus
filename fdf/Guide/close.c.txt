
File: close.c
This file contains functions for safely closing and freeing resources used in the program.

Functions:

1. close_coordinates(t_point **coordinates, int width):
	- Purpose: Frees the memory allocated for the 2D array of coordinates.
	- Parameters:
		- t_point **coordinates: The 2D array of points to free.
		- int width: The width of the array (number of rows).
	- Code Documentation:

	static void close_coordinates(t_point **coordinates, int width) {
		int i = 0;    // Index for iterating through rows

		// Free each row in the array
		while (i < width) {
			free(coordinates[i]);
			i++;
		}
		free(coordinates);    // Free the array of pointers itself
	}

2. close_all(t_fdf *fdf, int exit_code):
	- Purpose: Frees all allocated resources and exits the program.
	- Parameters:
		- t_fdf *fdf: The main structure containing all allocated resources.
		- int exit_code: The exit code to return upon termination.
	- Code Documentation:

	void close_all(t_fdf *fdf, int exit_code) {
		close_coordinates(fdf->map->coordinates, fdf->map->max_x);    // Free map coordinates
		free(fdf->map);    // Free the map structure
		mlx_destroy_image(fdf->mlx, fdf->image->image);    // Destroy the image
		free(fdf->image);    // Free the image structure
		free(fdf->cam);    // Free the camera structure
		mlx_destroy_window(fdf->mlx, fdf->win);    // Destroy the window
		mlx_destroy_display(fdf->mlx);    // Destroy the display
		free(fdf->mlx);    // Free the MLX instance
		free(fdf);    // Free the main fdf structure
		error_by_code(exit_code);    // Call the error handler with the exit code
	}

3. close_map(t_fdf *fdf, int exit_code):
	- Purpose: Frees the map-related resources and exits the program.
	- Parameters:
		- t_fdf *fdf: The main structure containing the map resources.
		- int exit_code: The exit code to return upon termination.
	- Code Documentation:

	void close_map(t_fdf *fdf, int exit_code) {
		close_coordinates(fdf->map->coordinates, fdf->map->max_x);    // Free map coordinates
		free(fdf->map);    // Free the map structure
		mlx_destroy_window(fdf->mlx, fdf->win);    // Destroy the window
		mlx_destroy_display(fdf->mlx);    // Destroy the display
		free(fdf);    // Free the main fdf structure
		error_by_code(exit_code);    // Call the error handler with the exit code
	}